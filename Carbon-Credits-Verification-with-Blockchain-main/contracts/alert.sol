// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// AutomationCompatible.sol imports the functions from both ./AutomationBase.sol and
// ./interfaces/AutomationCompatibleInterface.sol
import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";
import "Carbon-Credits-Verification-with-Blockchain-main/contracts/lock-contract.sol";
/**
 * @dev Example contract, use the Forwarder as needed for additional security.
 *
 * @notice important to implement {AutomationCompatibleInterface}
 */

/**
 * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.
 * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.
 * DO NOT USE THIS CODE IN PRODUCTION.
 */

contract Alert is AutomationCompatibleInterface {
    /**
     * Public counter variable
     */
    uint256 public counter;
    Lock public lock;
    /**
     * Use an interval in seconds and a timestamp to slow execution of Upkeep
     */
    uint256 public immutable interval;
    uint256 public lastTimeStamp;

    event SendAlert(address addr, string message);

    constructor(uint256 updateInterval) {
        interval = updateInterval;
        lastTimeStamp = block.timestamp;
        counter = 0;
    }

    function deployLock() public {
        lock = new Lock();
        lock.addProponent();
        lock.newProject();
    }
    
    function returnDeposits(uint val) public {
        lock.changeProjectState(lock.getProjectState(val));
    }

    receive() external payable {
        require(address(lock) != address(0), "Lock contract not deployed yet."); 

        (bool success, ) = address(lock).call{value: msg.value}(""); 
        require(success, "Failed to send Ether to Lock.");

        returnDeposits(4);
    }

    function checkUpkeep(
        bytes calldata /* checkData */
    )
        external
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */)
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
            emit SendAlert(msg.sender, "It is time for your monitoring session");
            deployLock();
            //who do I send the second message to? Is it to all the verifiers? Or just to verifiers
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }
}
