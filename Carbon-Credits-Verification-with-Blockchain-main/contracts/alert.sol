// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

// AutomationCompatible.sol imports the functions from both ./AutomationBase.sol and
// ./interfaces/AutomationCompatibleInterface.sol
import "@openzeppelin/contracts/utils/Strings.sol";
import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";
import "Carbon-Credits-Verification-with-Blockchain-main/contracts/lock-contract.sol";
/**
 * @dev Example contract, use the Forwarder as needed for additional security.
 *
 * @notice important to implement {AutomationCompatibleInterface}
 */

/**
 * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.
 * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.
 * DO NOT USE THIS CODE IN PRODUCTION.
 */



contract Alert is AutomationCompatibleInterface {
    /**
     * Public counter variable
     */
    uint256 public counter;
    Lock public lock;
    /**
     * Use an interval in seconds and a timestamp to slow execution of Upkeep
     */
    uint256 public immutable interval;
    uint256 public lastTimeStamp;

    event Message(string);


    event SendAlert(address addr, string message);

    constructor(uint256 updateInterval) {
        interval = updateInterval;
        lastTimeStamp = block.timestamp;
        counter = 0;
    }

    function deployLock() public {
        lock = new Lock();
        lock.newProject();
        lock.newProp();
    }
    
    function returnDeposits() public {
        lock.changeProjectState(lock.getProjectState(4));

    }

    receive() external payable {
        require(address(lock) != address(0), "Lock contract not deployed yet."); 

        (bool success, ) = address(lock).call{value: address(this).balance}(""); 
        require(success, "Failed to send Ether to Lock.");

    }

    function checkUpkeep(
        bytes calldata /* checkData */
    )
        external
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */)
    {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function sendMessage(address recipientAddress, string memory message) public {
        // Interface-style call to the recipient's function
        (bool success, ) = recipientAddress.call(
            abi.encodeWithSignature("receiveMessage(string)", message)
        );
        require(success, "Message delivery failed!");
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        if ((block.timestamp - lastTimeStamp) > interval) {
            lastTimeStamp = block.timestamp;
            counter = counter + 1;
            // emit Message("Monitoring session reminder");
            // emit Message("Deploy the Lock contract");
            string memory message = string(abi.encodePacked("Monitoring # ", Strings.toString(counter)));
            sendMessage(0x17491b6C551F5eF7A5C25c6b767fde1219C3aae5,message);
        }
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }
}





    // // string memory message = string.concat("It's time for your monitoring ");
    //         // sendMessage(0xE1B55cE31Bf80BA829c8b4eA219Ad1e80B83b700,message);
    //         deployLock();
    //         //who do I send the second message to? Is it to all the verifiers? Or just to verifiers
        
















contract Recipient {
    string public lastMessage;
    address public sender;

    // Function to receive the message
    function receiveMessage(string calldata message) external {
        lastMessage = message;
        sender = msg.sender; // Stores the sender's address
    }
}




//contract Sender2 {
//     // Function to send message to another contract
//     function sendMessage(address recipientAddress, string memory message) external {
//         // Interface-style call to the recipient's function
//         (bool success, ) = recipientAddress.call(
//             abi.encodeWithSignature("receiveMessage(string)", message)
//         );
//         require(success, "Message delivery failed!");
//     }
// }